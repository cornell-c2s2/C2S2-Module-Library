//-------------------------------------------------------------------------
// Decoder.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL VerilogPlaceholder DecoderVRTL Definition
// Full name: DecoderVRTL__m_1__n_2
// At /home/vml37/c2s2/mxndecoder/rtl_design/sim/decoder/DecoderVRTL.py

//***********************************************************
// Pickled source file of placeholder DecoderVRTL__m_1__n_2
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder DecoderVRTL
//-----------------------------------------------------------

`ifndef DECODERVRTL
`define DECODERVRTL

// The source code below are included because they are specified
// as the v_libs Verilog placeholder option of component DecoderVRTL__m_1__n_2.

// If you get a duplicated def error from files included below, please
// make sure they are included either through the v_libs option or the
// explicit `include statement in the Verilog source code -- if they
// appear in both then they will be included twice!


// End of all v_libs files for component DecoderVRTL__m_1__n_2

`line 1 "DecoderVRTL.v" 0

module DecoderVRTL (
	x,
	y
);
    `ifdef USE_POWER_PINS
    inout vccd1, // User area 1 1.8V supply
    inout vssd1, // User area 1 digital ground
    `endif
	parameter m = 3;
	parameter n = 1 << m;
	input wire [m - 1:0] x;
	output reg [n - 1:0] y;
	always @(*) y = {{n - 1 {1'b0}}, 1'b1} << x;
endmodule

// `ifndef PROJECT_DECODER_V
// `define PROJECT_DECODER_V


// module DecoderVRTL
//     #(  parameter m = 3, 
//         parameter n = 1'b1 << m
//     )(
//         input  logic         enable, 
//         input  logic [m-1:0] x, 
//         output logic [n-1:0] y
//     );

//     ///////////////////////////////// design

//     always @(*)begin
//         if (!enable)begin
//             y = {n{1'b0}};
//         end
//         else begin
//             y = {{n-1{1'b0}},1'b1} << x; // << is a shift operator going left shift x positions
//         end
//     end
//     /////////////////////////////////

// endmodule

// `endif




`endif /* DECODERVRTL */
//-----------------------------------------------------------
// Wrapper of placeholder DecoderVRTL__m_1__n_2
//-----------------------------------------------------------

`ifndef DECODERVRTL__M_1__N_2
`define DECODERVRTL__M_1__N_2

module Decoder
(
  input logic reset,
  input logic clk,
  input logic [1-1:0] enable ,
  input logic [1-1:0] x ,
  output logic [2-1:0] y 
);
  DecoderVRTL
  #(
    .m( 1 ),
    .n( 2 )
  ) v
  (
    .enable( enable ),
    .x( x ),
    .y( y )
  );
endmodule

`endif /* DECODERVRTL__M_1__N_2 */

