//-------------------------------------------------------------------------
// Control.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL VerilogPlaceholder ControlVRTL Definition
// Full name: ControlVRTL__dib_2__dobreg_4
// At /home/vml37/c2s2/parallel2/rtl_design/sim/parallel/ControlVRTL.py

//***********************************************************
// Pickled source file of placeholder ControlVRTL__dib_2__dobreg_4
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder ControlVRTL
//-----------------------------------------------------------

`ifndef CONTROLVRTL
`define CONTROLVRTL

// The source code below are included because they are specified
// as the v_libs Verilog placeholder option of component ControlVRTL__dib_2__dobreg_4.

// If you get a duplicated def error from files included below, please
// make sure they are included either through the v_libs option or the
// explicit `include statement in the Verilog source code -- if they
// appear in both then they will be included twice!


// End of all v_libs files for component ControlVRTL__dib_2__dobreg_4

`line 1 "ControlVRTL.v" 0
module ControlVRTL 
#(
    parameter dib = 1,
    parameter dobreg = 1'b1 << dib
)(
    input   logic vin,
    input   logic rin,
    input   logic reset,

    output  logic vout,
    output  logic rout,
    output  logic EN,
    output  logic [dib-1:0] dsel
);
    logic [dobreg-1'b1:0] count;
    always @(*) begin 
        if (reset == 1'b1)begin
            dsel  =  0;
            EN    =  1'b0; 
            vout  =  1'b0;//1'b0
            rout  =  1'b0;
            count =  0;
        end
        else if ((vin==1) & (rin==1))begin 
            dsel = count;
            EN = 1'b1;
            rout = 1'b1;
            if (dsel == (dobreg - 1))begin 
                vout = 1'b1;
            end 
            else begin
                vout = 1'b0;
            end
            count = count + 1;
        end
        else begin
            dsel = 0;
            EN   = 1'b0; 
            vout = 1'b0;
            rout = 1'b0;
            count = count;
        end
    end
endmodule


`endif /* CONTROLVRTL */
//-----------------------------------------------------------
// Wrapper of placeholder ControlVRTL__dib_2__dobreg_4
//-----------------------------------------------------------

`ifndef CONTROLVRTL__DIB_2__DOBREG_4
`define CONTROLVRTL__DIB_2__DOBREG_4

module Control
(
  input logic clk,
  output logic [1-1:0] EN ,
  output logic [2-1:0] dsel ,
  input logic [1-1:0] reset ,
  input logic [1-1:0] rin ,
  output logic [1-1:0] rout ,
  input logic [1-1:0] vin ,
  output logic [1-1:0] vout 
);
  ControlVRTL
  #(
    .dib( 2 ),
    .dobreg( 4 )
  ) v
  (
    .EN( EN ),
    .dsel( dsel ),
    .reset( reset ),
    .rin( rin ),
    .rout( rout ),
    .vin( vin ),
    .vout( vout )
  );
endmodule

`endif /* CONTROLVRTL__DIB_2__DOBREG_4 */

